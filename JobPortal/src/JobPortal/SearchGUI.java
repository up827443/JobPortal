package JobPortal;

/**
 *
 * @author 804653
 * @version 0.0.1
 */
import java.util.ArrayList;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;


public class SearchGUI extends javax.swing.JFrame {

    //private String host = "jdbc:derby://localhost:1527/Job_Portal;";
    protected String host = "jdbc:derby://localhost:1527/Job_Portal;create=true;user=Job_Portal;password=Job_Portal";
    //private String host = "jdbc:derby:../JobPortal-master//database/Job_Portal";
    private String searchSql = "Select * from JOBS where";
    private String keyword = "''";

    protected static Connection con;
    private ResultSet rs;
    protected static Statement stmt;

    /**
     * Creates new form NewJFrame
     */
    public SearchGUI() {
        initComponents();
        /* setting an attribute in a Properties object */

        try {
            con = DriverManager.getConnection(host);
            



        } catch (SQLException err) {
            System.out.println(err.getMessage());
        }

        testingDropTables();
        createJobsTable();
        populateJobsTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public static void testingDropTables() {
        String dropJobs = ("DROP TABLE JOBS");
        try {
            stmt = con.createStatement();
            SearchGUI.stmt.executeUpdate(dropJobs);
        } catch (SQLException err) {
            System.out.println(err.getMessage());
        } finally {
            try {
                stmt.close();
            } catch (SQLException ex) {
                System.out.println("Could not close query");
            }

        }
    }

    public static void createJobsTable() {

        String creatTableJobs = ("CREATE TABLE JOBS (JOB_ID int not null, "
                + "JOB_TITLE varchar(100),"
                + " JOB_TYPE varchar (250),"
                + " ADDRESS varchar (250),"
                + " COUNTRY varchar (250),"
                + " JOB_DESCRIPTION varchar(250),"
                + " SECTOR varchar(60), COMPANY_NAME varchar(150),"
                + " SALARY varchar (100),"
                + " APPLY_BY_DATE date,"
                + " PRIMARY KEY (Job_ID) )");

        try {
            stmt = con.createStatement();
            SearchGUI.stmt.execute(creatTableJobs);
        } catch (SQLException err) {
            System.out.println(err.getMessage());
        } finally {
            try {
                stmt.close();
            } catch (SQLException ex) {
                System.out.println("Could not close query");
            }

        }
    }

    ;
    public static void populateJobsTable() {

        String populate1 = ("insert into JOBS (JOB_ID, JOB_TITLE, JOB_TYPE, JOB_DESCRIPTION, SECTOR, COMPANY_NAME, SALARY, ADDRESS, COUNTRY, APPLY_BY_DATE) values (1, 'Editor', 'PERMANENT', null, 'Consumer Services', 'Koelpin-Halvorson', '£18609.35', '95 Sunfield Circle', 'United Kingdom', '3/18/2017') \n"
                + ",(2, 'Editor', 'PART_TIME', null, 'Finance', 'Sauer, Schroeder and Schneider', '£26967.30', '0380 Prairieview Hill', 'United Kingdom', '1/1/2018') \n"
                + ",(3, 'Editor', 'FULL_TIME', null, 'n/a', 'Runolfsdottir-Hoeger', '$17945.58', '83 Portage Trail', 'United Kingdom', '11/11/2017') \n"
                + ",(4, 'Automation Specialist II', 'FULL_TIME', null, 'Consumer Services', 'Hermiston Inc', '¥25693.57', '09131 Sauthoff Avenue', 'United Kingdom', '1/17/2018') \n"
                + ",(5, 'Computer Systems Analyst IV', 'TEMPORARY', null, 'Energy', 'Abbott-Hartmann', '£17980.17', '3819 Messerschmidt Circle', 'United Kingdom', '10/6/2017') \n"
                + ",(6, 'Human Resources Assistant IV', 'PART_TIME', null, 'Finance', 'Walter, Lockman and Hessel', '¥16643.02', '46267 Huxley Terrace', 'United Kingdom', '10/13/2017') \n"
                + ",(7, 'Research Assistant III', 'TEMPORARY', null, 'Consumer Durables', 'Bahringer, Reynolds and Sawayn', '£17582.25', '7 Helena Crossing', 'United Kingdom', '11/11/2017') \n"
                + ",(8, 'GIS Technical Architect', 'TEMPORARY', null, 'Finance', 'Jenkins LLC', '€22627,61', '8 Gateway Place', 'United Kingdom', '4/16/2017') \n"
                + ",(9, 'Operator', 'TEMPORARY', null, 'Capital Goods', 'Pagac LLC', '¥19168.13', '621 Sugar Street', 'United Kingdom', '7/16/2017') \n"
                + ",(10, 'Mechanical Systems Engineer', 'PERMANENT', null, 'Finance', 'Ryan-Beer', '$38094.42', '0757 Lerdahl Plaza', 'United Kingdom', '3/5/2017')\n"
                + ",(12, 'Quality Control Specialist', 'FULL_TIME', null, 'Finance', 'Boyer Group', '¥21822.72', '026 Londonderry Park', 'United Kingdom', '10/15/2017') \n"
                + ",(13, 'Director of Sales', 'TEMPORARY', null, 'Miscellaneous', 'Rosenbaum, Schmeler and Hermann', '€38649,43', '65900 Dorton Avenue', 'United Kingdom', '4/26/2017') \n"
                + ",(14, 'VP Product Management', 'INTERNSHIP', null, 'n/a', 'Hoppe-Volkman', '¥38260.59', '8361 Mendota Plaza', 'United Kingdom', '8/10/2017') \n"
                + ",(15, 'Internal Auditor', 'INTERNSHIP', null, 'Basic Industries', 'Schultz, Mosciski and Turner', '£33848.68', '51582 Fulton Crossing', 'United Kingdom', '3/4/2017') \n"
                + ",(16, 'Programmer III', 'FULL_TIME', null, 'n/a', 'Dickinson, Moen and Friesen', '£18057.83', '00 Cambridge Hill', 'United Kingdom', '5/1/2017') \n"
                + ",(17, 'Help Desk Technician', 'PART_TIME', null, 'Transportation', 'Grant Group', '$25036.91', '6 Memorial Plaza', 'United Kingdom', '4/15/2017') \n"
                + ",(18, 'Chemical Engineer', 'FULL_TIME', null, 'Public Utilities', 'Sauer Group', '£21335.10', '1 Lawn Parkway', 'United Kingdom', '11/2/2017') \n"
                + ",(19, 'Health Coach IV', 'INTERNSHIP', null, 'Consumer Non-Durables', 'Powlowski Group', '€31907,49', '993 Sutteridge Parkway', 'United Kingdom', '1/1/2018') \n"
                + ",(20, 'Senior Cost Accountant', 'PERMANENT', null, 'Consumer Durables', 'Littel, Ritchie and Hintz', '¥22024.28', '8933 Mcguire Crossing', 'United Kingdom', '9/3/2017') \n"
                + ",(21, 'Compensation Analyst', 'INTERNSHIP', null, 'Consumer Durables', 'Gulgowski, Harris and Schuppe', '¥38751.49', '9912 Esker Circle', 'United Kingdom', '11/13/2017') \n"
                + ",(22, 'Senior Editor', 'INTERNSHIP', null, 'Health Care', 'Medhurst-Rice', '$38052.41', '330 Graceland Terrace', 'United Kingdom', '2/24/2017') \n"
                + ",(23, 'Office Assistant III', 'PART_TIME', null, 'Finance', 'Cole, Runolfsson and Huel', '¥36286.18', '7568 Iowa Way', 'United Kingdom', '1/5/2018') \n"
                + ",(24, 'Teacher', 'PERMANENT', null, 'n/a', 'Wiza and Sons', '€32364,01', '6460 Judy Way', 'United Kingdom', '1/15/2018') \n"
                + ",(25, 'Chemical Engineer', 'INTERNSHIP', null, 'n/a', 'Ernser-Gibson', '$25689.95', '26 Westridge Court', 'United Kingdom', '5/16/2017') \n"
                + ",(26, 'Research Nurse', 'TEMPORARY', null, 'Consumer Services', 'Maggio, Altenwerth and Hickle', '£29157.10', '2214 Oakridge Crossing', 'United Kingdom', '1/30/2018') \n"
                + ",(27, 'Quality Engineer', 'TEMPORARY', null, 'Finance', 'Stamm LLC', '€16335,54', '06522 Maple Wood Drive', 'United Kingdom', '4/11/2017') \n"
                + ",(28, 'Account Coordinator', 'PART_TIME', null, 'Miscellaneous', 'Hyatt Group', '$31230.90', '33559 Northport Point', 'United Kingdom', '11/15/2017') \n"
                + ",(29, 'Registered Nurse', 'PART_TIME', null, 'n/a', 'Bashirian LLC', '£19388.81', '4633 Loftsgordon Center', 'United Kingdom', '7/15/2017') \n"
                + ",(30, 'Geological Engineer', 'INTERNSHIP', null, 'Health Care', 'Rutherford, D''Amore and Hermiston', '¥17855.79', '5 Fordem Place', 'United Kingdom', '11/11/2017') \n"
                + ",(31, 'Teacher', 'PERMANENT', null, 'Public Utilities', 'Blanda and Sons', '¥31915.17', '0915 Briar Crest Avenue', 'United Kingdom', '10/3/2017') \n"
                + ",(32, 'Recruiter', 'TEMPORARY', null, 'Consumer Services', 'Cronin-Halvorson', '£25326.92', '80946 Elgar Hill', 'United Kingdom', '9/16/2017') \n"
                + ",(33, 'Professor', 'INTERNSHIP', null, 'Consumer Services', 'Haley, Lubowitz and Schulist', '£24177.38', '7710 Main Center', 'United Kingdom', '2/12/2018') \n"
                + ",(34, 'Structural Analysis Engineer', 'FULL_TIME', null, 'Consumer Non-Durables', 'Schmeler LLC', '$39057.34', '5 Waywood Road', 'United Kingdom', '11/18/2017') \n"
                + ",(35, 'Senior Developer', 'PERMANENT', null, 'Finance', 'Kunde, Bashirian and Beer', '$26996.58', '711 Vidon Avenue', 'United Kingdom', '1/13/2018') \n"
                + ",(36, 'Administrative Officer', 'TEMPORARY', null, 'Consumer Services', 'King-Bernier', '$34090.68', '70 Jana Park', 'United Kingdom', '12/3/2017') \n"
                + ",(37, 'Recruiter', 'INTERNSHIP', null, 'Consumer Non-Durables', 'Greenfelder, Jenkins and Collins', '¥22124.94', '4 Westport Terrace', 'United Kingdom', '6/26/2017') \n"
                + ",(38, 'Assistant Media Planner', 'PERMANENT', null, 'Technology', 'Bruen, Raynor and Dickens', '€38528,20', '73 Buell Parkway', 'United Kingdom', '3/24/2017') \n"
                + ",(39, 'Quality Engineer', 'TEMPORARY', null, 'n/a', 'Waters, Tremblay and Heathcote', '$27766.44', '4 Stang Park', 'United Kingdom', '2/27/2017') \n"
                + ",(40, 'Civil Engineer', 'TEMPORARY', null, 'n/a', 'Wintheiser-Stehr', '¥16665.06', '4 Algoma Alley', 'United Kingdom', '8/23/2017') \n"
                + ",(41, 'Engineer I', 'TEMPORARY', null, 'n/a', 'Dickinson LLC', '$16807.71', '5698 Eagle Crest Center', 'United Kingdom', '3/10/2017') \n"
                + ",(42, 'General Manager', 'PART_TIME', null, 'Consumer Services', 'Morar, Bins and Rodriguez', '€24991,20', '273 Lighthouse Bay Road', 'United Kingdom', '3/1/2017') \n"
                + ",(43, 'Business Systems Development Analyst', 'PERMANENT', null, 'Health Care', 'Prosacco, Bashirian and Metz', '$28913.94', '413 Sachs Hill', 'United Kingdom', '3/11/2017') \n"
                + ",(44, 'Research Associate', 'PART_TIME', null, 'Finance', 'Wilderman Group', '€18401,80', '56 Hanover Crossing', 'United Kingdom', '2/21/2018') \n"
                + ",(45, 'Assistant Professor', 'TEMPORARY', null, 'Consumer Services', 'Bradtke Inc', '¥29437.30', '85 Westend Road', 'United Kingdom', '8/18/2017') \n"
                + ",(46, 'Office Assistant I', 'INTERNSHIP', null, 'Finance', 'DuBuque, Witting and Bergnaum', '$29369.03', '0015 Bellgrove Park', 'United Kingdom', '10/28/2017') \n"
                + ",(47, 'Computer Systems Analyst II', 'FULL_TIME', null, 'Finance', 'Langworth Inc', '€29185,26', '71905 Raven Hill', 'United Kingdom', '1/26/2018') \n"
                + ",(48, 'Technical Writer', 'TEMPORARY', null, 'Consumer Services', 'Johnson-Mayer', '$30283.35', '76173 Old Gate Parkway', 'United Kingdom', '11/13/2017') \n"
                + ",(49, 'Environmental Tech', 'TEMPORARY', null, 'Consumer Non-Durables', 'Pagac, Goodwin and Muller', '¥28878.76', '545 Hintze Street', 'United Kingdom', '7/8/2017') \n"
                + ",(50, 'Statistician I', 'INTERNSHIP', null, 'Consumer Non-Durables', 'Dicki-Skiles', '€38577,62', '401 Coolidge Drive', 'United Kingdom', '12/4/2017') \n"
                + ",(51, 'Social Worker', 'TEMPORARY', null, 'n/a', 'Dooley-Mann', '€36887,24', '44929 Farwell Place', 'United Kingdom', '8/8/2017') \n"
                + ",(52, 'Business Systems Development Analyst', 'PART_TIME', null, 'Health Care', 'Metz, Murphy and Prohaska', '¥37584.23', '0220 West Road', 'United Kingdom', '8/23/2017') \n"
                + ",(53, 'Accountant I', 'INTERNSHIP', null, 'Capital Goods', 'Heaney and Sons', '€31908,86', '70585 Lindbergh Plaza', 'United Kingdom', '5/25/2017') \n"
                + ",(54, 'Office Assistant II', 'PERMANENT', null, 'Consumer Services', 'Hodkiewicz, Pacocha and Green', '¥38989.14', '66801 Bartelt Road', 'United Kingdom', '8/30/2017') \n"
                + ",(55, 'Sales Associate', 'TEMPORARY', null, 'Basic Industries', 'Dare and Sons', '€18009,39', '2 Warner Plaza', 'United Kingdom', '5/4/2017') \n"
                + ",(56, 'Sales Associate', 'TEMPORARY', null, 'Consumer Services', 'Hoeger-Prohaska', '£37651.57', '4 Hudson Pass', 'United Kingdom', '1/20/2018') \n"
                + ",(57, 'Budget/Accounting Analyst II', 'TEMPORARY', null, 'Health Care', 'Schmidt-Dicki', '£30682.81', '34072 Caliangt Park', 'United Kingdom', '5/13/2017') \n"
                + ",(58, 'Web Developer IV', 'PART_TIME', null, 'Capital Goods', 'Durgan, Bergstrom and Ruecker', '¥22689.44', '019 Hoard Avenue', 'United Kingdom', '6/6/2017') \n"
                + ",(59, 'Business Systems Development Analyst', 'INTERNSHIP', null, 'Health Care', 'Glover-Koelpin', '€27203,18', '643 Garrison Junction', 'United Kingdom', '5/20/2017') \n"
                + ",(60, 'Programmer Analyst IV', 'PERMANENT', null, 'Energy', 'Senger-Connelly', '$25423.44', '81777 Farwell Court', 'United Kingdom', '3/24/2017') \n"
                + ",(61, 'Help Desk Technician', 'PART_TIME', null, 'Technology', 'Wilkinson-Mertz', '€39309,03', '6840 Delladonna Lane', 'United Kingdom', '9/29/2017') \n"
                + ",(62, 'Executive Secretary', 'PERMANENT', null, 'Consumer Non-Durables', 'Nicolas, Harber and Schmidt', '$33777.23', '4377 Golf View Trail', 'United Kingdom', '5/25/2017') \n"
                + ",(63, 'Database Administrator III', 'PERMANENT', null, 'n/a', 'Sporer-Lynch', '¥19309.88', '5 Jenna Alley', 'United Kingdom', '2/20/2018') \n"
                + ",(64, 'Senior Editor', 'PERMANENT', null, 'Health Care', 'Breitenberg Group', '£16626.35', '18607 Bobwhite Center', 'United Kingdom', '12/4/2017') \n"
                + ",(65, 'Operator', 'TEMPORARY', null, 'Public Utilities', 'Shields Inc', '€27486,21', '8043 Hanover Point', 'United Kingdom', '3/15/2017') \n"
                + ",(66, 'Director of Sales', 'TEMPORARY', null, 'Basic Industries', 'Satterfield, Gibson and Rogahn', '¥37349.11', '9 Ridgeway Pass', 'United Kingdom', '12/5/2017') \n"
                + ",(67, 'Data Coordiator', 'TEMPORARY', null, 'Technology', 'Berge-Weimann', '$36178.72', '934 Golden Leaf Crossing', 'United Kingdom', '8/3/2017') \n"
                + ",(68, 'Business Systems Development Analyst', 'PERMANENT', null, 'Health Care', 'Davis LLC', '£25316.69', '7 Spaight Avenue', 'United Kingdom', '4/6/2017') \n"
                + ",(69, 'Accounting Assistant IV', 'FULL_TIME', null, 'n/a', 'Hagenes-Streich', '$31652.36', '18740 Hanson Avenue', 'United Kingdom', '1/8/2018') \n"
                + ",(70, 'Developer I', 'INTERNSHIP', null, 'Health Care', 'Cremin and Sons', '¥17030.18', '8 Marquette Center', 'United Kingdom', '8/23/2017') \n"
                + ",(71, 'Account Coordinator', 'PERMANENT', null, 'Consumer Services', 'Romaguera Group', '€33325,40', '9 Fairfield Parkway', 'United Kingdom', '9/24/2017') \n"
                + ",(72, 'Programmer I', 'TEMPORARY', null, 'Finance', 'Bergstrom-Schuster', '$33608.71', '28 Bellgrove Lane', 'United Kingdom', '9/13/2017') \n"
                + ",(73, 'Media Manager IV', 'FULL_TIME', null, 'Consumer Non-Durables', 'Feil-Kulas', '¥32951.02', '64112 Clarendon Alley', 'United Kingdom', '5/15/2017') \n"
                + ",(74, 'Community Outreach Specialist', 'PART_TIME', null, 'Basic Industries', 'Bailey and Sons', '£17219.74', '0 Fulton Avenue', 'United Kingdom', '5/14/2017') \n"
                + ",(75, 'VP Product Management', 'FULL_TIME', null, 'Consumer Services', 'Turner Group', '¥29726.76', '94 Pine View Plaza', 'United Kingdom', '2/7/2018') \n"
                + ",(76, 'Media Manager III', 'FULL_TIME', null, 'Consumer Non-Durables', 'O''Reilly and Sons', '¥20392.14', '01 Swallow Center', 'United Kingdom', '12/13/2017') \n"
                + ",(77, 'Administrative Officer', 'TEMPORARY', null, 'Finance', 'Bergstrom, Crist and Kub', '£32899.41', '46 Elmside Crossing', 'United Kingdom', '9/4/2017') \n"
                + ",(78, 'Information Systems Manager', 'INTERNSHIP', null, 'Technology', 'Krajcik, Morissette and Stokes', '€28174,04', '82 Golf View Way', 'United Kingdom', '4/25/2017') \n"
                + ",(79, 'Assistant Professor', 'TEMPORARY', null, 'Consumer Services', 'Hegmann LLC', '$25321.77', '6 American Road', 'United Kingdom', '9/3/2017') \n"
                + ",(80, 'Community Outreach Specialist', 'INTERNSHIP', null, 'Health Care', 'Kihn-Becker', '£36153.36', '1312 Beilfuss Way', 'United Kingdom', '10/17/2017') \n"
                + ",(81, 'Director of Sales', 'PART_TIME', null, 'Basic Industries', 'Stracke, Morar and McLaughlin', '¥16148.73', '75 Village Center', 'United Kingdom', '12/21/2017') \n"
                + ",(82, 'Clinical Specialist', 'INTERNSHIP', null, 'n/a', 'Olson LLC', '$21262.14', '454 Derek Lane', 'United Kingdom', '6/13/2017') \n"
                + ",(83, 'Actuary', 'TEMPORARY', null, 'Capital Goods', 'Stamm, Gaylord and Jacobson', '$20027.04', '99528 Northridge Place', 'United Kingdom', '5/5/2017') \n"
                + ",(84, 'Social Worker', 'PERMANENT', null, 'Energy', 'Crist Inc', '€27004,57', '57 Basil Point', 'United Kingdom', '5/25/2017') \n"
                + ",(85, 'GIS Technical Architect', 'PART_TIME', null, 'Consumer Services', 'DuBuque and Sons', '$21186.77', '69 Forest Dale Point', 'United Kingdom', '8/2/2017') \n"
                + ",(86, 'Electrical Engineer', 'FULL_TIME', null, 'Finance', 'Abshire-Schuppe', '£35593.71', '33710 Green Ridge Street', 'United Kingdom', '2/25/2017') \n"
                + ",(87, 'Data Coordiator', 'PERMANENT', null, 'Energy', 'Jast, Block and Satterfield', '$31878.00', '30706 Red Cloud Court', 'United Kingdom', '12/28/2017') \n"
                + ",(88, 'Software Test Engineer II', 'TEMPORARY', null, 'Consumer Services', 'Hegmann LLC', '¥22686.44', '39 Spaight Terrace', 'United Kingdom', '4/3/2017') \n"
                + ",(89, 'Software Engineer IV', 'TEMPORARY', null, 'n/a', 'Blick-McLaughlin', '¥18211.63', '95 Delaware Hill', 'United Kingdom', '2/17/2018') \n"
                + ",(90, 'Human Resources Manager', 'INTERNSHIP', null, 'Finance', 'Schmitt LLC', '€33034,61', '1 Alpine Junction', 'United Kingdom', '2/9/2018') \n"
                + ",(91, 'Administrative Officer', 'INTERNSHIP', null, 'Energy', 'Pagac-Douglas', '$21289.87', '89359 Eastwood Drive', 'United Kingdom', '6/14/2017') \n"
                + ",(92, 'VP Accounting', 'INTERNSHIP', null, 'Energy', 'Bruen, Renner and Jacobi', '€25721,45', '2 Algoma Trail', 'United Kingdom', '4/21/2017') \n"
                + ",(93, 'Recruiter', 'INTERNSHIP', null, 'Basic Industries', 'Grant, Douglas and Gibson', '$26344.80', '218 3rd Place', 'United Kingdom', '2/7/2018') \n"
                + ",(94, 'Structural Analysis Engineer', 'INTERNSHIP', null, 'Technology', 'Altenwerth LLC', '¥17123.51', '37 Packers Avenue', 'United Kingdom', '4/4/2017') \n"
                + ",(95, 'Project Manager', 'FULL_TIME', null, 'Public Utilities', 'Purdy LLC', '¥26797.93', '725 Old Gate Pass', 'United Kingdom', '7/7/2017') \n"
                + ",(96, 'Safety Technician I', 'PART_TIME', null, 'Consumer Durables', 'Strosin, Graham and Turner', '$26472.52', '190 Hudson Place', 'United Kingdom', '11/27/2017') \n"
                + ",(97, 'Engineer IV', 'TEMPORARY', null, 'Consumer Non-Durables', 'Rath Inc', '€35494,39', '67 Lakewood Gardens Avenue', 'United Kingdom', '5/23/2017') \n"
                + ",(98, 'Nurse Practicioner', 'FULL_TIME', null, 'Health Care', 'Haley-Rice', '$33828.61', '167 Johnson Circle', 'United Kingdom', '7/2/2017') \n"
                + ",(99, 'Social Worker', 'PART_TIME', null, 'n/a', 'Schoen LLC', '£35829.25', '00763 Alpine Drive', 'United Kingdom', '3/10/2017') \n"
                + ",(100, 'Safety Technician III', 'PERMANENT', null, 'Public Utilities', 'Bahringer, Balistreri and Monahan', '$20836.46', '17358 Graceland Parkway', 'United Kingdom', '7/8/2017') \n"
                + " ");
        try {
            stmt = con.createStatement();
            SearchGUI.stmt.executeUpdate(populate1);
        } catch (SQLException err) {
            System.out.println(err.getMessage());
        } finally {
            try {
                stmt.close();
            } catch (SQLException ex) {
                System.out.println("Could not close query");
            }

        }

    }

    ;
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        menuBar2 = new java.awt.MenuBar();
        menu3 = new java.awt.Menu();
        menu4 = new java.awt.Menu();
        menuBar3 = new java.awt.MenuBar();
        menu5 = new java.awt.Menu();
        menu6 = new java.awt.Menu();
        searchFrame = new javax.swing.JInternalFrame();
        jPanel1 = new javax.swing.JPanel();
        signInButton = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        searchFilters = new javax.swing.JPanel();
        jobTypeLable = new javax.swing.JLabel();
        partTimeCheckBox = new javax.swing.JCheckBox();
        permanentCheckBox = new javax.swing.JCheckBox();
        temporaryCheckBox = new javax.swing.JCheckBox();
        internshipCheckBox = new javax.swing.JCheckBox();
        jobSectorLable = new javax.swing.JLabel();
        fullTimeCheckBox = new javax.swing.JCheckBox();
        consumerServiceCheckBox = new javax.swing.JCheckBox();
        financeCheckBox = new javax.swing.JCheckBox();
        constructionCheckBox = new javax.swing.JCheckBox();
        transportationCheckBox = new javax.swing.JCheckBox();
        publicUtilitiesCheckBox = new javax.swing.JCheckBox();
        basicIndustriesCheckBox = new javax.swing.JCheckBox();
        countryLable = new javax.swing.JLabel();
        spainCheckBox = new javax.swing.JCheckBox();
        germanyCheckBox = new javax.swing.JCheckBox();
        franceCheckBox = new javax.swing.JCheckBox();
        norwayCheckBox = new javax.swing.JCheckBox();
        greeceCheckBox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane(resultsPanel);
        resultsPanel = new javax.swing.JPanel();

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        menu3.setLabel("File");
        menuBar2.add(menu3);

        menu4.setLabel("Edit");
        menuBar2.add(menu4);

        menu5.setLabel("File");
        menuBar3.add(menu5);

        menu6.setLabel("Edit");
        menuBar3.add(menu6);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        searchFrame.setVisible(true);

        signInButton.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        signInButton.setText("Sign in");
        signInButton.setAlignmentY(0.0F);

        searchTextField.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        searchTextField.setText("Search");
        searchTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchTextFieldFocusLost(evt);
            }
        });
        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });

        searchButton.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        searchButton.setText("Find Jobs ");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(signInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 696, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(signInButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchTextField)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jobTypeLable.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        jobTypeLable.setText("Job Type ");

        partTimeCheckBox.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        partTimeCheckBox.setText("Part-time");

        permanentCheckBox.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        permanentCheckBox.setText("Permanent ");

        temporaryCheckBox.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        temporaryCheckBox.setText("Temporary");

        internshipCheckBox.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        internshipCheckBox.setText("Intership");

        jobSectorLable.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        jobSectorLable.setText("Job Sector");

        fullTimeCheckBox.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        fullTimeCheckBox.setText("Full-time ");
        fullTimeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullTimeCheckBoxActionPerformed(evt);
            }
        });

        consumerServiceCheckBox.setText("Consumer Services");
        consumerServiceCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                consumerServiceCheckBoxStateChanged(evt);
            }
        });
        consumerServiceCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consumerServiceCheckBoxActionPerformed(evt);
            }
        });

        financeCheckBox.setText("Finance");
        financeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                financeCheckBoxActionPerformed(evt);
            }
        });

        constructionCheckBox.setText("Construction ");
        constructionCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                constructionCheckBoxActionPerformed(evt);
            }
        });

        transportationCheckBox.setText("Transportation");
        transportationCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transportationCheckBoxActionPerformed(evt);
            }
        });

        publicUtilitiesCheckBox.setText("Public Utilities");

        basicIndustriesCheckBox.setText("Basic Industries");
        basicIndustriesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                basicIndustriesCheckBoxActionPerformed(evt);
            }
        });

        countryLable.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        countryLable.setText("Country");

        spainCheckBox.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        spainCheckBox.setText("Spain");

        germanyCheckBox.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        germanyCheckBox.setText("Germany");
        germanyCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                germanyCheckBoxActionPerformed(evt);
            }
        });

        franceCheckBox.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        franceCheckBox.setText("France");

        norwayCheckBox.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        norwayCheckBox.setText("Norway");

        greeceCheckBox.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        greeceCheckBox.setText("Greece");

        javax.swing.GroupLayout searchFiltersLayout = new javax.swing.GroupLayout(searchFilters);
        searchFilters.setLayout(searchFiltersLayout);
        searchFiltersLayout.setHorizontalGroup(
            searchFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fullTimeCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jobSectorLable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(financeCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(searchFiltersLayout.createSequentialGroup()
                .addGroup(searchFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(consumerServiceCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(constructionCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(basicIndustriesCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(publicUtilitiesCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(transportationCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(searchFiltersLayout.createSequentialGroup()
                .addGroup(searchFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jobTypeLable, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(partTimeCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(permanentCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(temporaryCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(internshipCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(countryLable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spainCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(germanyCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(franceCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(norwayCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(greeceCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        searchFiltersLayout.setVerticalGroup(
            searchFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchFiltersLayout.createSequentialGroup()
                .addComponent(jobSectorLable, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(consumerServiceCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(financeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(constructionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transportationCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(basicIndustriesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(publicUtilitiesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jobTypeLable, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fullTimeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(partTimeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(permanentCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(temporaryCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(internshipCheckBox)
                .addGap(18, 18, 18)
                .addComponent(countryLable, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spainCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(germanyCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(franceCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(norwayCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(greeceCheckBox)
                .addGap(0, 16, Short.MAX_VALUE))
        );

        resultsPanel.setLayout(new javax.swing.BoxLayout(resultsPanel, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(resultsPanel);

        javax.swing.GroupLayout searchFrameLayout = new javax.swing.GroupLayout(searchFrame.getContentPane());
        searchFrame.getContentPane().setLayout(searchFrameLayout);
        searchFrameLayout.setHorizontalGroup(
            searchFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(searchFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchFilters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(searchFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(searchFrameLayout.createSequentialGroup()
                    .addGap(164, 164, 164)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 764, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        searchFrameLayout.setVerticalGroup(
            searchFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchFrameLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchFilters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(searchFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchFrameLayout.createSequentialGroup()
                    .addGap(77, 77, 77)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(searchFrame)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(searchFrame)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void germanyCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_germanyCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_germanyCheckBoxActionPerformed

    private void basicIndustriesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_basicIndustriesCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_basicIndustriesCheckBoxActionPerformed

    private void transportationCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transportationCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_transportationCheckBoxActionPerformed

    private void constructionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_constructionCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_constructionCheckBoxActionPerformed

    private void financeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_financeCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_financeCheckBoxActionPerformed

    private void consumerServiceCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consumerServiceCheckBoxActionPerformed

    }//GEN-LAST:event_consumerServiceCheckBoxActionPerformed

    private void consumerServiceCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_consumerServiceCheckBoxStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_consumerServiceCheckBoxStateChanged

    private void fullTimeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullTimeCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fullTimeCheckBoxActionPerformed

    /**
     * Creates the SQL query from the suer inputs of the search screen and
     * clears the displayed results.
     */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        searchSql += "( Job_Title = '" + keyword + "'"
                + " or Job_Type = '" + keyword + "'"
                + " or Country = '" + keyword + "'"
                + " or Job_Description = '" + keyword + "'"
                + " or Sector = '" + keyword + "'"
                + " or Company_Name = '" + keyword + "'"
                + " or Salary = '" + keyword + "')";

        sectorFilter();
        jobTypeFilter();
        countryFilter();
        resultsPanel.removeAll();
        resultsPanel.updateUI();
        search();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed

    }//GEN-LAST:event_searchTextFieldActionPerformed
    /**
     * Sets the keyword for the search to the user input once the focus is lost.
     *
     * @param evt
     */
    private void searchTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFieldFocusLost
        keyword = searchTextField.getText();
    }//GEN-LAST:event_searchTextFieldFocusLost

    private void searchTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFieldFocusGained

    }//GEN-LAST:event_searchTextFieldFocusGained
    /**
     *
     * Adds to the SQL search string based on the check boxes selected for
     * sector.
     *
     */
    private void sectorFilter() {

        if (consumerServiceCheckBox.isSelected()
                || publicUtilitiesCheckBox.isSelected()
                || financeCheckBox.isSelected()
                || constructionCheckBox.isSelected()
                || transportationCheckBox.isSelected()
                || basicIndustriesCheckBox.isSelected()
                || publicUtilitiesCheckBox.isSelected()) {
            ArrayList<String> sectors = new ArrayList<String>();
            searchSql += "and( sector = ";

            if (consumerServiceCheckBox.isSelected()) {
                sectors.add("'Consumer Services'");
            };
            if (financeCheckBox.isSelected()) {
                sectors.add("'Finance'");
            };
            if (constructionCheckBox.isSelected()) {
                sectors.add("'construction'");
            };
            if (transportationCheckBox.isSelected()) {
                sectors.add("'transportation'");
            };
            if (basicIndustriesCheckBox.isSelected()) {
                sectors.add("'BasicIndustries'");
            };
            if (publicUtilitiesCheckBox.isSelected()) {
                sectors.add("'publicUtilities'");
            };
            for (int i = 0; i < sectors.size(); i++) {
                if (i < sectors.size() - 1) {
                    searchSql += sectors.get(i) + " or sector = ";
                } else {
                    searchSql += sectors.get(i) + ")";
                };
            };
        };
    }

    /**
     *
     * Adds to the SQL search string based on the check boxes selected for job
     * type.
     *
     */
    private void jobTypeFilter() {

        if (fullTimeCheckBox.isSelected()
                || partTimeCheckBox.isSelected()
                || permanentCheckBox.isSelected()
                || permanentCheckBox.isSelected()
                || temporaryCheckBox.isSelected()
                || internshipCheckBox.isSelected()) {
            ArrayList<String> jobType = new ArrayList<String>();

            searchSql += "and( Job_Type = ";

            if (fullTimeCheckBox.isSelected()) {
                jobType.add("'FULL_TIME'");
            };
            if (partTimeCheckBox.isSelected()) {
                jobType.add("'PART_TIME'");
            };
            if (permanentCheckBox.isSelected()) {
                jobType.add("'PERMANENT'");
            };
            if (temporaryCheckBox.isSelected()) {
                jobType.add("'TEMPORARY'");
            };
            if (internshipCheckBox.isSelected()) {
                jobType.add("'INTERNSHIP'");
            };
            for (int i = 0; i < jobType.size(); i++) {
                if (i < jobType.size() - 1) {
                    searchSql += jobType.get(i) + " or job_Type = ";
                } else {
                    searchSql += jobType.get(i) + ")";
                };
            };
        };
    }

    /**
     *
     * Adds to the SQL search string based on the check boxes selected for
     * country.
     *
     */
    private void countryFilter() {
        if (spainCheckBox.isSelected()
                || germanyCheckBox.isSelected()
                || franceCheckBox.isSelected()
                || norwayCheckBox.isSelected()
                || greeceCheckBox.isSelected()) {

            ArrayList<String> country = new ArrayList<String>();
            searchSql += "and( country = ";
            if (spainCheckBox.isSelected()) {
                country.add("'Spain'");
            };
            if (germanyCheckBox.isSelected()) {
                country.add("'Germany'");
            };
            if (franceCheckBox.isSelected()) {
                country.add("'France'");
            };
            if (norwayCheckBox.isSelected()) {
                country.add("'Norway'");
            };
            if (greeceCheckBox.isSelected()) {
                country.add("'Greece'");
            };
            for (int i = 0; i < country.size(); i++) {
                if (i < country.size() - 1) {
                    searchSql += country.get(i) + " or country = ";
                } else {
                    searchSql += country.get(i) + ")";
                };
            };
        };
    }

    /**
     *
     * Runs the search SQL based on the string created from the user inputs then
     * displays the results on the GUI.
     *
     */
    public void search() {
        try {
            stmt = con.createStatement();
            rs = stmt.executeQuery(searchSql);

            if (!rs.next()) {
                searchTextField.setText("no results found");
            } else {

                while (rs.next()) {
                    SearchResult result = new SearchResult();

                    int Job_ID = rs.getInt("Job_ID");
                    String Job_Title = rs.getString("Job_Title");
                    String Job_Type = rs.getString("Job_Type");
                    java.util.Date Date = rs.getDate("APPLY_BY_DATE");
                    String Address = rs.getString("Address");
                    String Country = rs.getString("Country");
                    String Job_Description = rs.getString("Job_Description");
                    String Sector = rs.getString("Sector");
                    String Company_Name = rs.getString("Company_Name");
                    String Salary = rs.getString("Salary");

                    result.jobTitleLable.setText(Job_Title);
                    result.resultsJobTitleLable.setText(Company_Name);
                    result.resultsJobTypeLable.setText(Job_Type);
                    result.resultsApplyByDateLable.setText(Date.toString());
                    result.resultsSalaryLable.setText(Salary);
                    result.resultsCountryLable.setText(Country);
                    result.resultsSectorLable.setText(Sector);
                    result.resultsJobDescriptionLable.setText(Job_Description);
                    System.out.println(Job_Title);
                    resultsPanel.add(result);
                    resultsPanel.revalidate();
                    resultsPanel.repaint();
                }
            }

        } catch (SQLException err) {
            System.out.println(err.getMessage());
        } finally {
            try {
                stmt.close();
            } catch (SQLException ex) {
                System.out.println("Could not close query");
            }

        }
        searchSql = "Select * from JOBS where";

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox basicIndustriesCheckBox;
    private javax.swing.JCheckBox constructionCheckBox;
    private javax.swing.JCheckBox consumerServiceCheckBox;
    private javax.swing.JLabel countryLable;
    private javax.swing.JCheckBox financeCheckBox;
    private javax.swing.JCheckBox franceCheckBox;
    private javax.swing.JCheckBox fullTimeCheckBox;
    private javax.swing.JCheckBox germanyCheckBox;
    private javax.swing.JCheckBox greeceCheckBox;
    private javax.swing.JCheckBox internshipCheckBox;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jobSectorLable;
    private javax.swing.JLabel jobTypeLable;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.Menu menu3;
    private java.awt.Menu menu4;
    private java.awt.Menu menu5;
    private java.awt.Menu menu6;
    private java.awt.MenuBar menuBar1;
    private java.awt.MenuBar menuBar2;
    private java.awt.MenuBar menuBar3;
    private javax.swing.JCheckBox norwayCheckBox;
    private javax.swing.JCheckBox partTimeCheckBox;
    private javax.swing.JCheckBox permanentCheckBox;
    private javax.swing.JCheckBox publicUtilitiesCheckBox;
    private javax.swing.JPanel resultsPanel;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel searchFilters;
    private javax.swing.JInternalFrame searchFrame;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JLabel signInButton;
    private javax.swing.JCheckBox spainCheckBox;
    private javax.swing.JCheckBox temporaryCheckBox;
    private javax.swing.JCheckBox transportationCheckBox;
    // End of variables declaration//GEN-END:variables
}
